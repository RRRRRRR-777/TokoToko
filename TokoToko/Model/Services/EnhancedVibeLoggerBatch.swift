//
//  EnhancedVibeLoggerBatch.swift
//  TokoToko
//
//  Created by bokuyamada on 2025/08/30.
//

import Foundation

// MARK: - Batch Processing Extension

/// EnhancedVibeLogger„ÅÆ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Å®„Éï„Ç°„Ç§„É´Âá∫ÂäõÊ©üËÉΩÊã°Âºµ
extension EnhancedVibeLogger {

  // MARK: - Output Methods

  /// „Ç≥„É≥„ÇΩ„Éº„É´„Å∏„ÅÆ„É≠„Ç∞Âá∫Âäõ
  internal func outputToConsole(_ logEntry: EnhancedVibeLogEntry) {
    let consoleOutput = formatConsoleOutput(logEntry)
    print(consoleOutput)
  }

  /// „Éï„Ç°„Ç§„É´„Å∏„ÅÆ„É≠„Ç∞Âá∫Âäõ
  internal func outputToFile(_ logEntry: EnhancedVibeLogEntry) {
    guard let jsonData = try? JSONEncoder().encode(logEntry),
      let jsonString = String(data: jsonData, encoding: .utf8)
    else {
      return
    }

    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd"
    let dateString = dateFormatter.string(from: Date())

    let fileName = "tokotoko_\(dateString).log"
    let filePath = "\(logDirectoryPath)/\(fileName)"

    let logLine = "\(jsonString)\n"

    if FileManager.default.fileExists(atPath: filePath) {
      if let fileHandle = FileHandle(forWritingAtPath: filePath) {
        fileHandle.seekToEndOfFile()
        fileHandle.write(logLine.data(using: .utf8) ?? Data())
        fileHandle.closeFile()
      }
    } else {
      try? logLine.write(toFile: filePath, atomically: true, encoding: .utf8)
    }
  }

  // MARK: - Batch Log Management

  /// „Éê„ÉÉ„ÉÅ„É¢„Éº„Éâ„ÇíÈñãÂßã
  ///
  /// ÊåáÂÆö„Åï„Çå„ÅüÈñìÈöî„Åß„É≠„Ç∞„Éê„ÉÉ„Éï„Ç°„ÇíËá™Âãï„Éï„É©„ÉÉ„Ç∑„É•„Åô„Çã„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ
  /// „Éê„ÉÉ„ÉÅ„É¢„Éº„Éâ„Åß„ÅØ„ÄÅ„É≠„Ç∞„Ç®„É≥„Éà„É™„ÅØÂç≥Â∫ß„Å´„Éï„Ç°„Ç§„É´Âá∫Âäõ„Åï„Çå„Åö„ÄÅ
  /// „Éê„ÉÉ„Éï„Ç°„Å´ËìÑÁ©ç„Åï„Çå„Å¶ÂÆöÊúüÁöÑ„Å´‰∏ÄÊã¨Âá∫Âäõ„Åï„Çå„Åæ„Åô„ÄÇ
  ///
  /// - Parameter interval: „Éï„É©„ÉÉ„Ç∑„É•ÈñìÈöîÔºàÁßíÔºâ„ÄÇ„Éá„Éï„Ç©„É´„Éà„ÅØ30Áßí
  public func startBatchMode(interval: TimeInterval = 30.0) {
    logQueue.async { [weak self] in
      guard let self = self else { return }

      self.stopBatchMode()

      DispatchQueue.main.async {
        self.batchTimer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { _ in
          self.flushLogBuffer()
        }
      }
    }
  }

  /// „Éê„ÉÉ„ÉÅ„É¢„Éº„Éâ„ÇíÂÅúÊ≠¢
  ///
  /// „Çø„Ç§„Éû„Éº„ÇíÁÑ°ÂäπÂåñ„Åó„ÄÅÊÆã„Çä„ÅÆ„É≠„Ç∞„Éê„ÉÉ„Éï„Ç°„ÇíÂº∑Âà∂ÁöÑ„Å´„Éï„É©„ÉÉ„Ç∑„É•„Åó„Åæ„Åô„ÄÇ
  /// „Éê„ÉÉ„ÉÅ„É¢„Éº„ÉâÁµÇ‰∫ÜÂæå„ÅØ„ÄÅ„É≠„Ç∞„Ç®„É≥„Éà„É™„ÅåÂç≥Â∫ß„Å´„Éï„Ç°„Ç§„É´Âá∫Âäõ„Åï„Çå„Åæ„Åô„ÄÇ
  public func stopBatchMode() {
    logQueue.async { [weak self] in
      guard let self = self else { return }

      DispatchQueue.main.async {
        self.batchTimer?.invalidate()
        self.batchTimer = nil
      }

      self.flushLogBuffer()
    }
  }

  /// „É≠„Ç∞„Éê„ÉÉ„Éï„Ç°„ÅÆ„Éï„É©„ÉÉ„Ç∑„É•
  ///
  /// „Éê„ÉÉ„Éï„Ç°„Å´ËìÑÁ©ç„Åï„Çå„Åü„Åô„Åπ„Å¶„ÅÆ„É≠„Ç∞„Ç®„É≥„Éà„É™„Çí„Éï„Ç°„Ç§„É´„Å´Âá∫Âäõ„Åó„ÄÅ
  /// „Éê„ÉÉ„Éï„Ç°„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åô„ÄÇ„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„ÅÆÊ†∏„Å®„Å™„Çã„É°„ÇΩ„ÉÉ„Éâ„Åß„Åô„ÄÇ
  internal func flushLogBuffer() {
    guard !logBuffer.isEmpty else { return }

    let currentBuffer = logBuffer
    logBuffer.removeAll()

    for logEntry in currentBuffer {
      outputToFile(logEntry)
    }
  }

  // MARK: - Formatting Methods

  /// „Ç≥„É≥„ÇΩ„Éº„É´Âá∫ÂäõÁî®„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  ///
  /// „É≠„Ç∞„Ç®„É≥„Éà„É™„ÇíË™≠„Åø„ÇÑ„Åô„ÅÑ„Ç≥„É≥„ÇΩ„Éº„É´ÂΩ¢Âºè„Å´Â§âÊèõ„Åó„Åæ„Åô„ÄÇ
  /// ÁµµÊñáÂ≠ó„ÄÅ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÄÅ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÊÉÖÂ†±„ÄÅ„ÇΩ„Éº„ÇπÊÉÖÂ†±„ÇíÂê´„ÇÄ
  /// ÊßãÈÄ†Âåñ„Åï„Çå„ÅüÂá∫Âäõ„ÇíÁîüÊàê„Åó„Åæ„Åô„ÄÇ
  ///
  /// - Parameter logEntry: „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂØæË±°„ÅÆ„É≠„Ç∞„Ç®„É≥„Éà„É™
  /// - Returns: „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„Åø„ÅÆÊñáÂ≠óÂàó
  internal func formatConsoleOutput(_ logEntry: EnhancedVibeLogEntry) -> String {
    let timestamp = logEntry.timestamp
    let level = logEntry.level
    let operation = logEntry.operation
    let message = logEntry.message
    let source = logEntry.source

    var output = "\(level.emoji) [\(level.rawValue)] \(timestamp) [\(operation)] \(message)"

    if let source = source {
      output += " (\(source.fileName):\(source.lineNumber) \(source.functionName))"
    }

    if !logEntry.context.isEmpty {
      output += " Context: \(logEntry.context)"
    }

    if let humanNote = logEntry.humanNote {
      output += " üìù Human: \(humanNote)"
    }

    if let aiTodo = logEntry.aiTodo {
      output += " ü§ñ AI-TODO: \(aiTodo)"
    }

    return output
  }
}
